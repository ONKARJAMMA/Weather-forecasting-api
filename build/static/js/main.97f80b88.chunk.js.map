{"version":3,"sources":["apiKeys.js","forcast.js","images/WeatherIcons.gif","currentLocation.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","key","base","Forcast","props","query","setQuery","useState","error","setError","weather","setWeather","forecast","setForecast","search","city","axios","get","apiKeys","then","response","data","catch","console","log","message","searchWeather","list","searchForecast","useEffect","defaults","React","createElement","className","ReactAnimatedWeather","icon","color","size","animate","type","placeholder","onChange","e","target","value","src","onClick","main","name","sys","country","Math","round","temp","humidity","visibility","wind","speed","length","filter","item","index","map","Date","dt_txt","toLocaleDateString","alt","Weather","Component","constructor","arguments","state","lat","undefined","lon","errorMessage","temperatureC","temperatureF","description","sunrise","sunset","errorMsg","getPosition","options","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","getWeather","async","api_call","fetch","json","this","setState","componentDidMount","position","coords","latitude","longitude","err","alert","timerID","setInterval","componentWillUnmount","clearInterval","render","Fragment","id","Clock","format","interval","ticking","d","getDay","getDate","getMonth","getFullYear","loader","style","width","WebkitUserDrag","fontSize","fontWeight","marginTop","App","CurrentLocation","href","rel","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.97f80b88.chunk.js","sourcesContent":["// Visit https://api.openweathermap.org & then signup to get our API keys for free\nmodule.exports = {\n  key: \"a57a760b0956e0f0284de69af7f403cd\",\n  base: \"https://api.openweathermap.org/data/2.5/\",\n};\n// here we are used the api which connects us to the real time temperature forecast\n// the api is from open weather map \n// a57a760b0956e0f0284de69af7f403cd this is the key of the api","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport apiKeys from \"./apiKeys\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\n\nfunction Forcast(props) {\n  const [query, setQuery] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [weather, setWeather] = useState({});\n  const [forecast, setForecast] = useState([]); // State to store forecast data\n\n  // Function to search for current weather\n  const searchWeather = (city) => {\n    axios\n      .get(\n        `${apiKeys.base}weather?q=${\n          city !== \"[object Object]\" ? city : query\n        }&units=metric&APPID=${apiKeys.key}`\n      )\n      .then((response) => {\n        setWeather(response.data);\n        setQuery(\"\");\n      })\n      .catch((error) => {\n        console.log(error);\n        setWeather(\"\");\n        setQuery(\"\");\n        setError({ message: \"Not Found\", query: query });\n      });\n  };\n\n  // Function to fetch forecast data\n  const searchForecast = (city) => {\n    axios\n      .get(\n        `${apiKeys.base}forecast?q=${\n          city !== \"[object Object]\" ? city : query\n        }&units=metric&APPID=${apiKeys.key}`\n      )\n      .then((response) => {\n        setForecast(response.data.list); // Extract the forecast data\n        setQuery(\"\");\n      })\n      .catch((error) => {\n        console.log(error);\n        setForecast([]);\n        setQuery(\"\");\n        setError({ message: \"Not Found\", query: query });\n      });\n  };\n\n  // Function to fetch both weather and forecast when searching\n  const search = (city) => {\n    searchWeather(city);\n    searchForecast(city);\n  };\n\n  useEffect(() => {\n    search(\"Delhi\"); // Default city\n  }, []);\n\n  const defaults = {\n    color: \"white\",\n    size: 112,\n    animate: true,\n  };\n\n  return (\n    <div className=\"forecast\">\n      <div className=\"forecast-icon\">\n        <ReactAnimatedWeather\n          icon={props.icon}\n          color={defaults.color}\n          size={defaults.size}\n          animate={defaults.animate}\n        />\n      </div>\n      <div className=\"today-weather\">\n        <h3>{props.weather}</h3>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search any city\"\n            onChange={(e) => setQuery(e.target.value)}\n            value={query}\n          />\n          <div className=\"img-box\">\n            <img\n              src=\"https://images.avishkaar.cc/workflow/newhp/search-white.png\"\n              onClick={() => search(query)} // Trigger search\n            />\n          </div>\n        </div>\n\n        {/* Current Weather */}\n        <ul>\n          {typeof weather.main !== \"undefined\" ? (\n            <div>\n              <li className=\"cityHead\">\n                <p>\n                  {weather.name}, {weather.sys.country}\n                </p>\n                <img\n                  className=\"temp\"\n                  src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}.png`}\n                />\n              </li>\n              <li>\n                Temperature{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.main.temp)}°c ({weather.weather[0].main})\n                </span>\n              </li>\n              <li>\n                Humidity{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.main.humidity)}%\n                </span>\n              </li>\n              <li>\n                Visibility{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.visibility)} mi\n                </span>\n              </li>\n              <li>\n                Wind Speed{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.wind.speed)} Km/h\n                </span>\n              </li>\n            </div>\n          ) : (\n            <li>\n              {error.query} {error.message}\n            </li>\n          )}\n        </ul>\n        \n\n        {/* Forecast Data */}\n        <h3>FIVE DAY PREDICTION</h3>\n        <div className=\"forecast-container\">\n          {forecast.length > 0\n            ? forecast\n                .filter((item, index) => index % 8 === 0) // Show one forecast per day\n                .map((item, index) => (\n                  <div key={index} className=\"forecast-item\">\n                    <p>{new Date(item.dt_txt).toLocaleDateString()}</p>\n                    <img\n                      src={`https://openweathermap.org/img/wn/${item.weather[0].icon}.png`}\n                      alt=\"Weather Icon\"\n                    />\n                    <p>\n                      {Math.round(item.main.temp)}°c ({item.weather[0].main})\n                    </p>\n                  </div>\n                ))\n            : \"Loading forecast...\"}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Forcast;\n","export default __webpack_public_path__ + \"static/media/WeatherIcons.c90d089e.gif\";","import React from \"react\";\nimport apiKeys from \"./apiKeys\";\nimport Clock from \"react-live-clock\";\nimport Forcast from \"./forcast\";\nimport loader from \"./images/WeatherIcons.gif\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\nconst dateBuilder = (d) => {\n  let months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  let days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month = months[d.getMonth()];\n  let year = d.getFullYear();\n\n  return `${day}, ${date} ${month} ${year}`;\n};\nconst defaults = {\n  color: \"white\",\n  size: 112,\n  animate: true,\n};\nclass Weather extends React.Component {\n  state = {\n    lat: undefined,\n    lon: undefined,\n    errorMessage: undefined,\n    temperatureC: undefined,\n    temperatureF: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    icon: \"CLEAR_DAY\",\n    sunrise: undefined,\n    sunset: undefined,\n    errorMsg: undefined,\n  };\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      this.getPosition()\n        //If user allow location service then will fetch data & send it to get-weather function.\n        .then((position) => {\n          this.getWeather(position.coords.latitude, position.coords.longitude);\n        })\n        .catch((err) => {\n          //If user denied location service then standard location weather will le shown on basis of latitude & latitude.\n          this.getWeather(28.67, 77.22);\n          alert(\n            \"You have disabled location service. Allow 'This APP' to access your location. Your current location will be used for calculating Real time weather.\"\n          );\n        });\n    } else {\n      alert(\"Geolocation not available\");\n    }\n\n    this.timerID = setInterval(\n      () => this.getWeather(this.state.lat, this.state.lon),\n      600000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  // tick = () => {\n  //   this.getPosition()\n  //   .then((position) => {\n  //     this.getWeather(position.coords.latitude, position.coords.longitude)\n  //   })\n  //   .catch((err) => {\n  //     this.setState({ errorMessage: err.message });\n  //   });\n  // }\n\n  getPosition = (options) => {\n    return new Promise(function (resolve, reject) {\n      navigator.geolocation.getCurrentPosition(resolve, reject, options);\n    });\n  };\n  getWeather = async (lat, lon) => {\n    const api_call = await fetch(\n      `${apiKeys.base}weather?lat=${lat}&lon=${lon}&units=metric&APPID=${apiKeys.key}`\n    );\n    const data = await api_call.json();\n    this.setState({\n      lat: lat,\n      lon: lon,\n      city: data.name,\n      temperatureC: Math.round(data.main.temp),\n      temperatureF: Math.round(data.main.temp * 1.8 + 32),\n      humidity: data.main.humidity,\n      main: data.weather[0].main,\n      country: data.sys.country,\n      // sunrise: this.getTimeFromUnixTimeStamp(data.sys.sunrise),\n\n      // sunset: this.getTimeFromUnixTimeStamp(data.sys.sunset),\n    });\n    switch (this.state.main) {\n      case \"Haze\":\n        this.setState({ icon: \"CLEAR_DAY\" });\n        break;\n      case \"Clouds\":\n        this.setState({ icon: \"CLOUDY\" });\n        break;\n      case \"Rain\":\n        this.setState({ icon: \"RAIN\" });\n        break;\n      case \"Snow\":\n        this.setState({ icon: \"SNOW\" });\n        break;\n      case \"Dust\":\n        this.setState({ icon: \"WIND\" });\n        break;\n      case \"Drizzle\":\n        this.setState({ icon: \"SLEET\" });\n        break;\n      case \"Fog\":\n        this.setState({ icon: \"FOG\" });\n        break;\n      case \"Smoke\":\n        this.setState({ icon: \"FOG\" });\n        break;\n      case \"Tornado\":\n        this.setState({ icon: \"WIND\" });\n        break;\n      default:\n        this.setState({ icon: \"CLEAR_DAY\" });\n    }\n  };\n\n  render() {\n    if (this.state.temperatureC) {\n      return (\n        <React.Fragment>\n          <div className=\"city\">\n            <div className=\"title\">\n              <h2>{this.state.city}</h2>\n              <h3>{this.state.country}</h3>\n            </div>\n            <div className=\"mb-icon\">\n              {\" \"}\n              <ReactAnimatedWeather\n                icon={this.state.icon}\n                color={defaults.color}\n                size={defaults.size}\n                animate={defaults.animate}\n              />\n              <p>{this.state.main}</p>\n            </div>\n            <div className=\"date-time\">\n              <div className=\"dmy\">\n                <div id=\"txt\"></div>\n                <div className=\"current-time\">\n                  <Clock format=\"HH:mm:ss\" interval={1000} ticking={true} />\n                </div>\n                <div className=\"current-date\">{dateBuilder(new Date())}</div>\n              </div>\n              <div className=\"temperature\">\n                <p>\n                  {this.state.temperatureC}°<span>C</span>\n                </p>\n                {/* <span className=\"slash\">/</span>\n                {this.state.temperatureF} &deg;F */}\n              </div>\n            </div>\n          </div>\n          <Forcast icon={this.state.icon} weather={this.state.main} />\n        </React.Fragment>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          <img src={loader} style={{ width: \"50%\", WebkitUserDrag: \"none\" }} />\n          <h3 style={{ color: \"white\", fontSize: \"22px\", fontWeight: \"600\" }}>\n            Detecting your location\n          </h3>\n          <h3 style={{ color: \"white\", marginTop: \"10px\" }}>\n            Your current location wil be displayed on the App <br></br> & used\n            for calculating Real time weather.\n          </h3>\n        </React.Fragment>\n      );\n    }\n  }\n}\n\nexport default Weather;\n","import React from \"react\";\nimport CurrentLocation from \"./currentLocation\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <div className=\"container\">\n        <CurrentLocation />\n      </div>\n      <div className=\"footer-info\">\n        <a href=\"https://github.com/ONKARJAMMA/REALTIME-WEATHER-FORECASTING-USING-API\">\n          Download Source Code\n        </a>{\" \"}\n        | Developed by{\" \"}\n        <a\n          target=\"_blank\"\n          href=\"https://www.linkedin.com/in/onkar-jamma-616010258/\"\n          rel=\"noopener noreferrer\"\n        >\n          ONKAR JAMMA\n        </a>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}